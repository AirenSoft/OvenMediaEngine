# Instruction: Build OvenMediaEngine with Netint Quadra support
# Adapted From: https://github.com/NETINT-Technologies/quadra_dockerfile/blob/main/ffmpeg/Dockerfile
# Usage:
# $ docker build -t airensoft/ovenmediaengine_nv:dev -f Dockerfile.niquadra.local .
# $ docker run -it --privileged --device /dev/nvme0n1 --device /dev/nvme0 airensoft/ovenmediaengine_nv:dev

FROM ubuntu:20.04 AS Base

ARG NI_RELEASE_VERSION=4.7.5
ARG NI_PACKAGE_NAME="Quadra_V${NI_RELEASE_VERSION}.zip"
ARG NI_PACKAGE_FOLDER="Quadra_V${NI_RELEASE_VERSION}"
ARG RC=RC3
#FFMPEG_VERSION can be: n3.4.2, n4.1.3, n4.2.1, n4.3, n4.3.1, n4.4, n5.0
ARG FFMPEG_VERSION=n5.0


ARG DEBIAN_FRONTEND=noninteractive
SHELL ["/bin/bash", "-c"]

#packages install
RUN apt-get update
RUN apt-get install -y pkg-config git gcc make g++ sudo wget uuid-runtime udev unzip

#copy ni release package to docker /NI_Release directory
COPY $NI_PACKAGE_NAME /NI_Release/
WORKDIR /NI_Release

#nvme cli install
WORKDIR /NI_Release
RUN wget -c https://github.com/linux-nvme/nvme-cli/archive/refs/tags/v1.16.tar.gz
RUN tar -xzf v1.16.tar.gz
WORKDIR /NI_Release/nvme-cli-1.16/
RUN make
RUN make install
RUN nvme list

#yasm install
WORKDIR /NI_Release
RUN wget -c http://www.tortall.net/projects/yasm/releases/yasm-1.3.0.tar.gz
RUN tar -zxf yasm-1.3.0.tar.gz
WORKDIR /NI_Release/yasm-1.3.0/
RUN ./configure
RUN make
RUN make install

#SW package install
WORKDIR /NI_Release
RUN unzip "$NI_PACKAGE_NAME"

#ffmpeg xcoder
RUN mv /NI_Release/"$NI_PACKAGE_FOLDER"/Quadra_SW_V"$NI_RELEASE_VERSION"_"$RC"/libxcoder /NI_Release
WORKDIR /NI_Release/libxcoder
RUN bash ./build.sh

ENV LD_LIBRARY_PATH=/usr/local/lib/:$LD_LIBRARY_PATH
RUN ldconfig
CMD echo "------end-----"

FROM    base AS build

WORKDIR /tmp

ARG     OME_VERSION=local
ARG 	STRIP=TRUE

ENV     PREFIX=/opt/ovenmediaengine
ENV     TEMP_DIR=/tmp/ome

## Copy code to image
COPY    ./ ${TEMP_DIR}/

## Install dependencies
RUN \
        ${TEMP_DIR}/misc/prerequisites.sh  --enable-niquadra --niquadra-path=/NI_Release/"$NI_PACKAGE_FOLDER"/Quadra_SW_V"$NI_RELEASE_VERSION"_"$RC"/FFmpeg-"$FFMPEG_VERSION"_netint_v"$NI_RELEASE_VERSION"_"$RC".diff

## Build OvenMediaEngine
RUN \
        cd ${TEMP_DIR}/src && \
        make release -j$(nproc)

RUN \
        if [ "$STRIP" = "TRUE" ] ; then strip ${TEMP_DIR}/src/bin/RELEASE/OvenMediaEngine ; fi

## Make running environment
RUN \
        cd ${TEMP_DIR}/src && \
        mkdir -p ${PREFIX}/bin/origin_conf && \
        mkdir -p ${PREFIX}/bin/edge_conf && \
        cp ./bin/RELEASE/OvenMediaEngine ${PREFIX}/bin/ && \
        cp ../misc/conf_examples/Origin.xml ${PREFIX}/bin/origin_conf/Server.xml && \
        cp ../misc/conf_examples/Logger.xml ${PREFIX}/bin/origin_conf/Logger.xml && \
        cp ../misc/conf_examples/Edge.xml ${PREFIX}/bin/edge_conf/Server.xml && \
        cp ../misc/conf_examples/Logger.xml ${PREFIX}/bin/edge_conf/Logger.xml && \
        rm -rf ${TEMP_DIR}

## Make Release Image
FROM    ubuntu:20.04 AS release

## Install libraries by package
ENV     DEBIAN_FRONTEND=noninteractive
RUN     apt-get update && apt-get install -y tzdata sudo

WORKDIR         /opt/ovenmediaengine/bin
EXPOSE          80/tcp 8080/tcp 8090/tcp 1935/tcp 3333/tcp 3334/tcp 4000-4005/udp 10000-10010/udp 9000/tcp
COPY            --from=build /opt/ovenmediaengine /opt/ovenmediaengine
COPY            --from=build /usr/local/lib/ /usr/local/lib/
RUN             ldconfig

# Default run as Origin mode
CMD             ["/opt/ovenmediaengine/bin/OvenMediaEngine", "-c", "origin_conf"]

